name: OSVVM Regression Testing

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 15 * * *'

jobs:
  GHDL:
    name: ${{ matrix.os.icon }}${{ matrix.os.name }} - GHDL ${{ matrix.backend }}
    runs-on: ${{ matrix.os.image }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - {icon: "üêß",   name: "Ubuntu",  image: "ubuntu-24.04", shell: "bash",      runtime: ""}
          - {icon: "üçè",   name: "macOS",   image: "macos-14",     shell: "bash",      runtime: ""}
          - {icon: "ü™üüü®", name: "Windows", image: "windows-2022", shell: "msys2 {0}", runtime: "ucrt64"}
        backend:
          - mcode
          - llvm
        exclude:
          - {os: {name: "macOS"}, backend: "mcode"}

    defaults:
      run:
        shell: ${{ matrix.os.shell }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ${{ matrix.os.icon }} Setup MSYS2 for ${{ matrix.os.runtime }}
        if: runner.os == 'Windows' && matrix.os.runtime != ''
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.os.runtime }}
          update: true
          install: git
          pacboy: tcl:p tcllib:p

      - name: ‚öôÔ∏è Setup GHDL
        uses: ghdl/setup-ghdl@v1
        with:
          version: nightly
          runtime: ${{ matrix.os.runtime }}
          backend: ${{ matrix.backend }}

      - name: üêßüõ†Ô∏è Install tcl and tcllib
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends tcl tcllib

      - name: üöß Run tests'
        run: |
          mkdir temp
          cd temp

          tclsh ../.github/test.tcl StartGHDL.tcl

      - name: 'üì§ Upload artifact: logs'
        uses: actions/upload-artifact@v4
        with:
          name: log-${{ matrix.os.name }}-ghdl-${{ matrix.backend }}
          include-hidden-files: true
          path: |
            temp/*.log
            temp/*.html
            temp/reports/*.html
            temp/reports/**/*.html
            temp/logs/**/*.*
            temp/reports/*.css
            temp/reports/osvvm.png
          if-no-files-found: error

      - name: 'üì§ Upload artifact: yaml'
        uses: actions/upload-artifact@v4
        with:
          name: yaml-${{ matrix.os.name }}-ghdl-${{ matrix.backend }}
          include-hidden-files: true
          path: |
            temp/*.yml
          if-no-files-found: error

      - name: 'üì§ Upload artifact: xml'
        uses: actions/upload-artifact@v4
        with:
          name: xml-${{ matrix.os.name }}-ghdl-${{ matrix.backend }}
          include-hidden-files: true
          path: |
            temp/*.xml
          if-no-files-found: error

  NVC:
    name: ü™üWindows - NVC
    runs-on: windows-2022

    defaults:
      run:
        shell: "msys2 {0}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üü® Setup MSYS2 for UCRT64
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: git
          pacboy: tcl:p tcllib:p

      - name: üêßüõ†Ô∏è Install NVC
        run: |
          # See https://github.com/nickg/nvc/releases
          # and https://github.com/nickg/nvc/issues/1131
          NVC_VERSION="1.15.0"
          NVC_DATE="20250111"
          NVC_HASH="ec21477e"
          
          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_LIGHT_BLUE="\e[94m"
          ANSI_NOCOLOR=$'\x1b[0m'
          
          DOWNLOAD_URL="https://github.com/nickg/nvc/releases/download/r${NVC_VERSION}/mingw-w64-ucrt-x86_64-nvc-${NVC_VERSION}.git${NVC_DATE}.${NVC_HASH}-1-any.pkg.tar.zst"
          printf "::group::${ANSI_LIGHT_BLUE}%s${ANSI_NOCOLOR}\n" "Downloading asset from '${DOWNLOAD_URL}' ..."
          curl -L "${DOWNLOAD_URL}" -o nvc.pkg.tar.zst
          printf "::endgroup::\n"
  
          printf "::group::${ANSI_LIGHT_BLUE}%s${ANSI_NOCOLOR}\n" "Installing 'nvc.pkg.tar.zst' file ..."
          pacman -U --noconfirm nvc.pkg.tar.zst
          printf "::endgroup::\n"
  
          printf "Deleting '%s' ... " "nvc.pkg.tar.zst"
          rm "nvc.pkg.tar.zst"
          if [[ $? -eq 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          else
            printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            printf "::warning title=%s::%s\n" "setup-nvc" "Failed to remove 'nvc.pkg.tar.zst'."
          fi

      - name: üöß Run tests'
        run: |
          mkdir temp
          cd temp

          tclsh ../.github/test.tcl StartNVC.tcl

      - name: 'üì§ Upload artifact: logs'
        uses: actions/upload-artifact@v4
        with:
          name: log-${{ matrix.os.name }}-nvc-${{ matrix.backend }}
          include-hidden-files: true
          path: |
            temp/*.log
            temp/*.html
            temp/reports/*.html
            temp/reports/**/*.html
            temp/logs/**/*.*
            temp/reports/*.css
            temp/reports/osvvm.png
          if-no-files-found: error

      - name: 'üì§ Upload artifact: yaml'
        uses: actions/upload-artifact@v4
        with:
          name: yaml-${{ matrix.os.name }}-nvc-${{ matrix.backend }}
          include-hidden-files: true
          path: |
            temp/*.yml
          if-no-files-found: error

      - name: 'üì§ Upload artifact: xml'
        uses: actions/upload-artifact@v4
        with:
          name: xml-${{ matrix.os.name }}-nvc-${{ matrix.backend }}
          include-hidden-files: true
          path: |
            temp/*.xml
          if-no-files-found: error

  PublishTestResults:
    name: üìä Publish Unit Tests Results
    runs-on: ubuntu-24.04
    needs:
      - GHDL
      - NVC

    if: always()

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4

      - name: 'üì• Download artifact: package'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: xml-*
          
      - name: List all artifacts
        run: |
          tree artifacts

      - name: üìä Publish Unit Test Results
        uses: dorny/test-reporter@v1
        with:
          name: OSVVM VC Regression Results
          path: artifacts/**/*.xml
          reporter: java-junit
          list-suites: all
          list-tests: failed

  Package:
    name: Package OSVVMLibraries incl. all Git submodules as artifact
    runs-on: ubuntu-24.04

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          path: OsvvmLibraries

      - name: List content of 'OsvvmLibraries' ...
        run: |
          tree OsvvmLibraries

      - name: 'üì§ Upload artifact: osvvm'
        uses: actions/upload-artifact@v4
        with:
          name: osvvm
          path: |
            OsvvmLibraries/*
          if-no-files-found: error
